/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VotingSystem {
  export type OptionStruct = { text: string; votes: BigNumberish };

  export type OptionStructOutput = [text: string, votes: bigint] & {
    text: string;
    votes: bigint;
  };
}

export interface VotingSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProposal"
      | "evaluateProposal"
      | "getProposalDetails"
      | "proposalCount"
      | "proposals"
      | "vote"
      | "votingToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Evaluated" | "ProposalCreated" | "Voted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, string, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingToken",
    data: BytesLike
  ): Result;
}

export namespace EvaluatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    evaluator: AddressLike,
    rating: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    evaluator: string,
    rating: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    evaluator: string;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    creator: AddressLike,
    title: string,
    isCustomVoting: boolean
  ];
  export type OutputTuple = [
    proposalId: bigint,
    creator: string,
    title: string,
    isCustomVoting: boolean
  ];
  export interface OutputObject {
    proposalId: bigint;
    creator: string;
    title: string;
    isCustomVoting: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    optionIndex: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    optionIndex: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    optionIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingSystem extends BaseContract {
  connect(runner?: ContractRunner | null): VotingSystem;
  waitForDeployment(): Promise<this>;

  interface: VotingSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProposal: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _options: string[],
      _coverImage: string
    ],
    [void],
    "nonpayable"
  >;

  evaluateProposal: TypedContractMethod<
    [_proposalId: BigNumberish, _rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposalDetails: TypedContractMethod<
    [_proposalId: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        boolean,
        VotingSystem.OptionStructOutput[]
      ] & {
        creator: string;
        title: string;
        description: string;
        coverImage: string;
        isCustomVoting: boolean;
        options: VotingSystem.OptionStructOutput[];
      }
    ],
    "view"
  >;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, boolean, boolean] & {
        creator: string;
        title: string;
        description: string;
        coverImage: string;
        exists: boolean;
        isCustomVoting: boolean;
      }
    ],
    "view"
  >;

  vote: TypedContractMethod<
    [_proposalId: BigNumberish, _optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _options: string[],
      _coverImage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "evaluateProposal"
  ): TypedContractMethod<
    [_proposalId: BigNumberish, _rating: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProposalDetails"
  ): TypedContractMethod<
    [_proposalId: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        boolean,
        VotingSystem.OptionStructOutput[]
      ] & {
        creator: string;
        title: string;
        description: string;
        coverImage: string;
        isCustomVoting: boolean;
        options: VotingSystem.OptionStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, boolean, boolean] & {
        creator: string;
        title: string;
        description: string;
        coverImage: string;
        exists: boolean;
        isCustomVoting: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_proposalId: BigNumberish, _optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Evaluated"
  ): TypedContractEvent<
    EvaluatedEvent.InputTuple,
    EvaluatedEvent.OutputTuple,
    EvaluatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "Evaluated(uint256,address,int8)": TypedContractEvent<
      EvaluatedEvent.InputTuple,
      EvaluatedEvent.OutputTuple,
      EvaluatedEvent.OutputObject
    >;
    Evaluated: TypedContractEvent<
      EvaluatedEvent.InputTuple,
      EvaluatedEvent.OutputTuple,
      EvaluatedEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string,bool)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "Voted(uint256,address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
